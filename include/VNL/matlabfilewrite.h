// This is vxl/VNL/matlab_filewrite.h
#ifndef vnl_matlab_filewrite_h_
#define vnl_matlab_filewrite_h_
#ifdef VCL_NEEDS_PRAGMA_INTERFACE
#pragma interface
#endif
/**
*  \file
*  \author David Capel, Oxford RRG
*  \date   17 August 1998
*
   \verbatim
   Modifications
   LSB (Manchester) 23/3/01  Tidied documentation
     Feb.2002 - Peter Vanroose - brief doxygen comment placed on single line
   \endverbatim
*/

#include <string>
#include <fstream>
#include <complex>

#include <VNL/vector.h>
#include <VNL/matrix.h>

namespace VNL {


/** Code to perform MATLAB binary file operations.
*    vnl_matlab_filewrite is a collection of I/O functions for reading/writing
*    matrices in the compact MATLAB binary format (.mat)
*/

class MatlabFilewrite
{
 public:
  MatlabFilewrite (char const* file_name, char const *basename = 0);

/** Add scalar/vector/matrix variable to the MAT file using specified variable name.
* If no name is given, variables will be generated by
* appending 0,1,2 etc to the given basename.
*/
  void Write(double v, char const* variable_name = 0);

  void Write(Vector<double> const & v, char const* variable_name = 0);
  void Write(Vector<std::complex<double> > const & v, char const* variable_name = 0);

  void Write(Matrix<float> const & M, char const* variable_name = 0);
  void Write(Matrix<double> const & M, char const* variable_name = 0);
  void Write(Matrix<std::complex<float> > const & M, char const* variable_name = 0);
  void Write(Matrix<std::complex<double> > const & M, char const* variable_name = 0);

  void Write(double const * const *M, int rows, int cols, char const* variable_name = 0);

 protected:
  std::string basename_;
  int variable_int_;
  std::fstream out_;

  std::string _MakeVarName(char const* variable_name);
};

}; // End namespace VNL

#endif // vnl_matlab_filewrite_h_
