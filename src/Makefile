# Makefile.in generated by automake 1.9.6 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/walkGenJRL
pkglibdir = $(libdir)/walkGenJRL
pkgincludedir = $(includedir)/walkGenJRL
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = TestFootPrintPGInterface$(EXEEXT) \
	TestHumanoidDynamicRobot$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(walkGenJRL_HEADERS)
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \
	"$(DESTDIR)$(walkGenJRLdir)"
libLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(lib_LTLIBRARIES)
libwalkGenJRL_la_LIBADD =
am_libwalkGenJRL_la_OBJECTS = libwalkGenJRL_la-Polynome.lo \
	libwalkGenJRL_la-PolynomeFoot.lo \
	libwalkGenJRL_la-StepOverPolynome.lo \
	libwalkGenJRL_la-ConvexHull.lo libwalkGenJRL_la-qld.lo \
	libwalkGenJRL_la-PreviewControl.lo \
	libwalkGenJRL_la-OptimalControllerSolver.lo \
	libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.lo \
	libwalkGenJRL_la-ZMPDiscretization.lo \
	libwalkGenJRL_la-fileReader.lo libwalkGenJRL_la-Joint.lo \
	libwalkGenJRL_la-Body.lo libwalkGenJRL_la-MultiBody.lo \
	libwalkGenJRL_la-DynamicBody.lo \
	libwalkGenJRL_la-DynamicMultiBody.lo \
	libwalkGenJRL_la-HumanoidDynamicMultiBody.lo \
	libwalkGenJRL_la-HumanoidSpecificities.lo \
	libwalkGenJRL_la-InverseKinematics.lo \
	libwalkGenJRL_la-StepOverPlanner.lo \
	libwalkGenJRL_la-CollisionDetector.lo \
	libwalkGenJRL_la-WaistHeightVariation.lo \
	libwalkGenJRL_la-UpperBodyMotion.lo \
	libwalkGenJRL_la-GenerateMotionFromKineoWorks.lo \
	libwalkGenJRL_la-ComAndFootRealizationByGeometry.lo \
	libwalkGenJRL_la-StepStackHandler.lo \
	libwalkGenJRL_la-PatternGeneratorInterface.lo
libwalkGenJRL_la_OBJECTS = $(am_libwalkGenJRL_la_OBJECTS)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_TestFootPrintPGInterface_OBJECTS =  \
	TestFootPrintPGInterface-TestFootPrintPGInterface.$(OBJEXT)
TestFootPrintPGInterface_OBJECTS =  \
	$(am_TestFootPrintPGInterface_OBJECTS)
TestFootPrintPGInterface_DEPENDENCIES =  \
	$(top_builddir)/src/libwalkGenJRL.la
am_TestHumanoidDynamicRobot_OBJECTS =  \
	TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.$(OBJEXT)
TestHumanoidDynamicRobot_OBJECTS =  \
	$(am_TestHumanoidDynamicRobot_OBJECTS)
TestHumanoidDynamicRobot_DEPENDENCIES =  \
	$(top_builddir)/src/libwalkGenJRL.la
DEFAULT_INCLUDES = -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libwalkGenJRL_la_SOURCES) \
	$(TestFootPrintPGInterface_SOURCES) \
	$(TestHumanoidDynamicRobot_SOURCES)
DIST_SOURCES = $(libwalkGenJRL_la_SOURCES) \
	$(TestFootPrintPGInterface_SOURCES) \
	$(TestHumanoidDynamicRobot_SOURCES)
walkGenJRLHEADERS_INSTALL = $(INSTALL_HEADER)
HEADERS = $(walkGenJRL_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/stasse/src/OpenHRP/PatternGeneratorJRL/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/stasse/src/OpenHRP/PatternGeneratorJRL/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/stasse/src/OpenHRP/PatternGeneratorJRL/missing --run autoconf
AUTOHEADER = ${SHELL} /home/stasse/src/OpenHRP/PatternGeneratorJRL/missing --run autoheader
AUTOMAKE = ${SHELL} /home/stasse/src/OpenHRP/PatternGeneratorJRL/missing --run automake-1.9
AWK = gawk
BOOST_CFLAGS = -I/usr/include/boost/include
BOOST_SANDBOX_CFLAGS = -I/usr/include/boost-sandbox -D_BOOST_MATRIX_
CC = gcc-3.3
CCDEPMODE = depmode=gcc3
CFLAGS = -O3
CPP = gcc-3.3 -E
CPPFLAGS =  -D_BOOST_MATRIX_
CXX = g++-3.3
CXXCPP = g++-3.3 -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O3 -I/usr/include/boost/include -I/usr/include/boost-sandbox -D_DEFAULT_MATRIX3x3_ -D_DEFAULT_VECTOR3D_
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"AC_PACKAGE_TARNAME\" -DVERSION=\"AC_PACKAGE_VERSION\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = g77
FFLAGS = -g -O2
GREP = /bin/grep
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS =  -llapack
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/stasse/src/OpenHRP/PatternGeneratorJRL/missing --run makeinfo
OBJEXT = o
PACKAGE = walkGenJRL
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 2.0
VNL_CFLAGS = 
VNL_LIB = 
ac_ct_CC = gcc-3.3
ac_ct_CXX = 
ac_ct_F77 = g77
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/stasse/src/OpenHRP/PatternGeneratorJRL/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
lib_LTLIBRARIES = libwalkGenJRL.la
libwalkGenJRL_la_SOURCES = \
	./Mathematics/Polynome.cpp \
	./Mathematics/PolynomeFoot.cpp \
	./Mathematics/StepOverPolynome.cpp\
	./Mathematics/ConvexHull.cpp \
	./Mathematics/qld.cpp \
	./PreviewControl/PreviewControl.cpp \
	./PreviewControl/OptimalControllerSolver.cpp \
	./PreviewControl/ZMPPreviewControlWithMultiBodyZMP.cpp \
	./ZMPRefTrajectoryGeneration/ZMPDiscretization.cpp \
	./RobotModel/fileReader.cpp \
	./RobotModel/Joint.cpp \
	./RobotModel/Body.cpp \
	./RobotModel/MultiBody.cpp \
	./RobotModel/DynamicBody.cpp \
	./RobotModel/DynamicMultiBody.cpp \
	./RobotModel/HumanoidDynamicMultiBody.cpp \
	./RobotModel/HumanoidSpecificities.cpp \
	./MotionGeneration/InverseKinematics.cpp \
	./MotionGeneration/StepOverPlanner.cpp\
	./MotionGeneration/CollisionDetector.cpp\
	./MotionGeneration/WaistHeightVariation.cpp\
	./MotionGeneration/UpperBodyMotion.cpp \
	./MotionGeneration/GenerateMotionFromKineoWorks.cpp \
	./MotionGeneration/ComAndFootRealizationByGeometry.cpp \
	StepStackHandler.cpp \
	PatternGeneratorInterface.cpp 

libwalkGenJRL_la_CPPFLAGS = -I$(srcdir)/Mathematics -I$(srcdir)/PreviewControl -I$(srcdir)/ZMPRefTrajectoryGeneration -I$(srcdir)/RobotModel -I$(srcdir)/MotionGeneration -I$(srcdir) -I$(top_srcdir)/include/VNL/NetLib -I$(top_srcdir)/../jrlCIR-dynamics/interfaces
TestFootPrintPGInterface_SOURCES = TestFootPrintPGInterface.cpp
TestFootPrintPGInterface_CPPFLAGS = -I$(srcdir)/Mathematics -I$(srcdir)/PreviewControl -I$(srcdir)/ZMPRefTrajectoryGeneration -I$(srcdir)/RobotModel -I$(srcdir)/MotionGeneration -I$(srcdir) -I$(top_srcdir)/include/VNL/NetLib -I$(top_srcdir)/../jrlCIR-dynamics/interfaces
TestFootPrintPGInterface_LDADD = $(top_builddir)/src/libwalkGenJRL.la
TestHumanoidDynamicRobot_SOURCES = TestHumanoidDynamicRobot.cpp
TestHumanoidDynamicRobot_CPPFLAGS = -I$(srcdir)/Mathematics -I$(srcdir)/PreviewControl -I$(srcdir)/ZMPRefTrajectoryGeneration -I$(srcdir)/RobotModel -I$(srcdir)/MotionGeneration -I$(srcdir) -I$(top_srcdir)/include/VNL/NetLib -I$(top_srcdir)/../jrlCIR-dynamics/interfaces
TestHumanoidDynamicRobot_LDADD = $(top_builddir)/src/libwalkGenJRL.la
walkGenJRLdir = ${prefix}/include/walkGenJRL
walkGenJRL_HEADERS = \
	./Mathematics/Polynome.h \
	./Mathematics/PolynomeFoot.h \
	./Mathematics/StepOverPolynome.h\
	./Mathematics/ConvexHull.h \
	./Mathematics/qld.h \
	./PreviewControl/PreviewControl.h \
	./PreviewControl/OptimalControllerSolver.h \
	./PreviewControl/ZMPPreviewControlWithMultiBodyZMP.h \
	./ZMPRefTrajectoryGeneration/ZMPDiscretization.h \
	./RobotModel/fileReader.h \
	./RobotModel/Body.h \
	./RobotModel/MultiBody.h \
	./RobotModel/DynamicBody.h \
	./RobotModel/DynamicMultiBody.h \
	./RobotModel/HumanoidDynamicMultiBody.h \
	./RobotModel/HumanoidSpecificities.h \
	./MotionGeneration/InverseKinematics.h \
	./MotionGeneration/StepOverPlanner.h\
	./MotionGeneration/CollisionDetector.h\
	./MotionGeneration/WaistHeightVariation.h\
	./MotionGeneration/UpperBodyMotion.h \
	./MotionGeneration/GenerateMotionFromKineoWorks.h \
	./MotionGeneration/ComAndFootRealization.h \
	./MotionGeneration/ComAndFootRealizationByGeometry.h \
	StepStackHandler.h \
	PatternGeneratorInterface.h 

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(mkdir_p) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@set -x; list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libwalkGenJRL.la: $(libwalkGenJRL_la_OBJECTS) $(libwalkGenJRL_la_DEPENDENCIES) 
	$(CXXLINK) -rpath $(libdir) $(libwalkGenJRL_la_LDFLAGS) $(libwalkGenJRL_la_OBJECTS) $(libwalkGenJRL_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
TestFootPrintPGInterface$(EXEEXT): $(TestFootPrintPGInterface_OBJECTS) $(TestFootPrintPGInterface_DEPENDENCIES) 
	@rm -f TestFootPrintPGInterface$(EXEEXT)
	$(CXXLINK) $(TestFootPrintPGInterface_LDFLAGS) $(TestFootPrintPGInterface_OBJECTS) $(TestFootPrintPGInterface_LDADD) $(LIBS)
TestHumanoidDynamicRobot$(EXEEXT): $(TestHumanoidDynamicRobot_OBJECTS) $(TestHumanoidDynamicRobot_DEPENDENCIES) 
	@rm -f TestHumanoidDynamicRobot$(EXEEXT)
	$(CXXLINK) $(TestHumanoidDynamicRobot_LDFLAGS) $(TestHumanoidDynamicRobot_OBJECTS) $(TestHumanoidDynamicRobot_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Po
include ./$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Po
include ./$(DEPDIR)/libwalkGenJRL_la-Body.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-CollisionDetector.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-ComAndFootRealizationByGeometry.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-ConvexHull.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-DynamicBody.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-DynamicMultiBody.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-GenerateMotionFromKineoWorks.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-HumanoidDynamicMultiBody.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-HumanoidSpecificities.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-InverseKinematics.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-Joint.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-MultiBody.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-OptimalControllerSolver.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-PatternGeneratorInterface.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-Polynome.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-PolynomeFoot.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-PreviewControl.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-StepOverPlanner.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-StepOverPolynome.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-StepStackHandler.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-UpperBodyMotion.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-WaistHeightVariation.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-ZMPDiscretization.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-fileReader.Plo
include ./$(DEPDIR)/libwalkGenJRL_la-qld.Plo

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

libwalkGenJRL_la-Polynome.lo: ./Mathematics/Polynome.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-Polynome.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-Polynome.Tpo" -c -o libwalkGenJRL_la-Polynome.lo `test -f './Mathematics/Polynome.cpp' || echo '$(srcdir)/'`./Mathematics/Polynome.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-Polynome.Tpo" "$(DEPDIR)/libwalkGenJRL_la-Polynome.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-Polynome.Tpo"; exit 1; fi
#	source='./Mathematics/Polynome.cpp' object='libwalkGenJRL_la-Polynome.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-Polynome.lo `test -f './Mathematics/Polynome.cpp' || echo '$(srcdir)/'`./Mathematics/Polynome.cpp

libwalkGenJRL_la-PolynomeFoot.lo: ./Mathematics/PolynomeFoot.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-PolynomeFoot.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-PolynomeFoot.Tpo" -c -o libwalkGenJRL_la-PolynomeFoot.lo `test -f './Mathematics/PolynomeFoot.cpp' || echo '$(srcdir)/'`./Mathematics/PolynomeFoot.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-PolynomeFoot.Tpo" "$(DEPDIR)/libwalkGenJRL_la-PolynomeFoot.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-PolynomeFoot.Tpo"; exit 1; fi
#	source='./Mathematics/PolynomeFoot.cpp' object='libwalkGenJRL_la-PolynomeFoot.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-PolynomeFoot.lo `test -f './Mathematics/PolynomeFoot.cpp' || echo '$(srcdir)/'`./Mathematics/PolynomeFoot.cpp

libwalkGenJRL_la-StepOverPolynome.lo: ./Mathematics/StepOverPolynome.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-StepOverPolynome.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-StepOverPolynome.Tpo" -c -o libwalkGenJRL_la-StepOverPolynome.lo `test -f './Mathematics/StepOverPolynome.cpp' || echo '$(srcdir)/'`./Mathematics/StepOverPolynome.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-StepOverPolynome.Tpo" "$(DEPDIR)/libwalkGenJRL_la-StepOverPolynome.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-StepOverPolynome.Tpo"; exit 1; fi
#	source='./Mathematics/StepOverPolynome.cpp' object='libwalkGenJRL_la-StepOverPolynome.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-StepOverPolynome.lo `test -f './Mathematics/StepOverPolynome.cpp' || echo '$(srcdir)/'`./Mathematics/StepOverPolynome.cpp

libwalkGenJRL_la-ConvexHull.lo: ./Mathematics/ConvexHull.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-ConvexHull.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-ConvexHull.Tpo" -c -o libwalkGenJRL_la-ConvexHull.lo `test -f './Mathematics/ConvexHull.cpp' || echo '$(srcdir)/'`./Mathematics/ConvexHull.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-ConvexHull.Tpo" "$(DEPDIR)/libwalkGenJRL_la-ConvexHull.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-ConvexHull.Tpo"; exit 1; fi
#	source='./Mathematics/ConvexHull.cpp' object='libwalkGenJRL_la-ConvexHull.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-ConvexHull.lo `test -f './Mathematics/ConvexHull.cpp' || echo '$(srcdir)/'`./Mathematics/ConvexHull.cpp

libwalkGenJRL_la-qld.lo: ./Mathematics/qld.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-qld.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-qld.Tpo" -c -o libwalkGenJRL_la-qld.lo `test -f './Mathematics/qld.cpp' || echo '$(srcdir)/'`./Mathematics/qld.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-qld.Tpo" "$(DEPDIR)/libwalkGenJRL_la-qld.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-qld.Tpo"; exit 1; fi
#	source='./Mathematics/qld.cpp' object='libwalkGenJRL_la-qld.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-qld.lo `test -f './Mathematics/qld.cpp' || echo '$(srcdir)/'`./Mathematics/qld.cpp

libwalkGenJRL_la-PreviewControl.lo: ./PreviewControl/PreviewControl.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-PreviewControl.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-PreviewControl.Tpo" -c -o libwalkGenJRL_la-PreviewControl.lo `test -f './PreviewControl/PreviewControl.cpp' || echo '$(srcdir)/'`./PreviewControl/PreviewControl.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-PreviewControl.Tpo" "$(DEPDIR)/libwalkGenJRL_la-PreviewControl.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-PreviewControl.Tpo"; exit 1; fi
#	source='./PreviewControl/PreviewControl.cpp' object='libwalkGenJRL_la-PreviewControl.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-PreviewControl.lo `test -f './PreviewControl/PreviewControl.cpp' || echo '$(srcdir)/'`./PreviewControl/PreviewControl.cpp

libwalkGenJRL_la-OptimalControllerSolver.lo: ./PreviewControl/OptimalControllerSolver.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-OptimalControllerSolver.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-OptimalControllerSolver.Tpo" -c -o libwalkGenJRL_la-OptimalControllerSolver.lo `test -f './PreviewControl/OptimalControllerSolver.cpp' || echo '$(srcdir)/'`./PreviewControl/OptimalControllerSolver.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-OptimalControllerSolver.Tpo" "$(DEPDIR)/libwalkGenJRL_la-OptimalControllerSolver.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-OptimalControllerSolver.Tpo"; exit 1; fi
#	source='./PreviewControl/OptimalControllerSolver.cpp' object='libwalkGenJRL_la-OptimalControllerSolver.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-OptimalControllerSolver.lo `test -f './PreviewControl/OptimalControllerSolver.cpp' || echo '$(srcdir)/'`./PreviewControl/OptimalControllerSolver.cpp

libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.lo: ./PreviewControl/ZMPPreviewControlWithMultiBodyZMP.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.Tpo" -c -o libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.lo `test -f './PreviewControl/ZMPPreviewControlWithMultiBodyZMP.cpp' || echo '$(srcdir)/'`./PreviewControl/ZMPPreviewControlWithMultiBodyZMP.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.Tpo" "$(DEPDIR)/libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.Tpo"; exit 1; fi
#	source='./PreviewControl/ZMPPreviewControlWithMultiBodyZMP.cpp' object='libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-ZMPPreviewControlWithMultiBodyZMP.lo `test -f './PreviewControl/ZMPPreviewControlWithMultiBodyZMP.cpp' || echo '$(srcdir)/'`./PreviewControl/ZMPPreviewControlWithMultiBodyZMP.cpp

libwalkGenJRL_la-ZMPDiscretization.lo: ./ZMPRefTrajectoryGeneration/ZMPDiscretization.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-ZMPDiscretization.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-ZMPDiscretization.Tpo" -c -o libwalkGenJRL_la-ZMPDiscretization.lo `test -f './ZMPRefTrajectoryGeneration/ZMPDiscretization.cpp' || echo '$(srcdir)/'`./ZMPRefTrajectoryGeneration/ZMPDiscretization.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-ZMPDiscretization.Tpo" "$(DEPDIR)/libwalkGenJRL_la-ZMPDiscretization.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-ZMPDiscretization.Tpo"; exit 1; fi
#	source='./ZMPRefTrajectoryGeneration/ZMPDiscretization.cpp' object='libwalkGenJRL_la-ZMPDiscretization.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-ZMPDiscretization.lo `test -f './ZMPRefTrajectoryGeneration/ZMPDiscretization.cpp' || echo '$(srcdir)/'`./ZMPRefTrajectoryGeneration/ZMPDiscretization.cpp

libwalkGenJRL_la-fileReader.lo: ./RobotModel/fileReader.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-fileReader.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-fileReader.Tpo" -c -o libwalkGenJRL_la-fileReader.lo `test -f './RobotModel/fileReader.cpp' || echo '$(srcdir)/'`./RobotModel/fileReader.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-fileReader.Tpo" "$(DEPDIR)/libwalkGenJRL_la-fileReader.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-fileReader.Tpo"; exit 1; fi
#	source='./RobotModel/fileReader.cpp' object='libwalkGenJRL_la-fileReader.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-fileReader.lo `test -f './RobotModel/fileReader.cpp' || echo '$(srcdir)/'`./RobotModel/fileReader.cpp

libwalkGenJRL_la-Joint.lo: ./RobotModel/Joint.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-Joint.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-Joint.Tpo" -c -o libwalkGenJRL_la-Joint.lo `test -f './RobotModel/Joint.cpp' || echo '$(srcdir)/'`./RobotModel/Joint.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-Joint.Tpo" "$(DEPDIR)/libwalkGenJRL_la-Joint.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-Joint.Tpo"; exit 1; fi
#	source='./RobotModel/Joint.cpp' object='libwalkGenJRL_la-Joint.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-Joint.lo `test -f './RobotModel/Joint.cpp' || echo '$(srcdir)/'`./RobotModel/Joint.cpp

libwalkGenJRL_la-Body.lo: ./RobotModel/Body.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-Body.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-Body.Tpo" -c -o libwalkGenJRL_la-Body.lo `test -f './RobotModel/Body.cpp' || echo '$(srcdir)/'`./RobotModel/Body.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-Body.Tpo" "$(DEPDIR)/libwalkGenJRL_la-Body.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-Body.Tpo"; exit 1; fi
#	source='./RobotModel/Body.cpp' object='libwalkGenJRL_la-Body.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-Body.lo `test -f './RobotModel/Body.cpp' || echo '$(srcdir)/'`./RobotModel/Body.cpp

libwalkGenJRL_la-MultiBody.lo: ./RobotModel/MultiBody.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-MultiBody.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-MultiBody.Tpo" -c -o libwalkGenJRL_la-MultiBody.lo `test -f './RobotModel/MultiBody.cpp' || echo '$(srcdir)/'`./RobotModel/MultiBody.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-MultiBody.Tpo" "$(DEPDIR)/libwalkGenJRL_la-MultiBody.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-MultiBody.Tpo"; exit 1; fi
#	source='./RobotModel/MultiBody.cpp' object='libwalkGenJRL_la-MultiBody.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-MultiBody.lo `test -f './RobotModel/MultiBody.cpp' || echo '$(srcdir)/'`./RobotModel/MultiBody.cpp

libwalkGenJRL_la-DynamicBody.lo: ./RobotModel/DynamicBody.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-DynamicBody.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-DynamicBody.Tpo" -c -o libwalkGenJRL_la-DynamicBody.lo `test -f './RobotModel/DynamicBody.cpp' || echo '$(srcdir)/'`./RobotModel/DynamicBody.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-DynamicBody.Tpo" "$(DEPDIR)/libwalkGenJRL_la-DynamicBody.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-DynamicBody.Tpo"; exit 1; fi
#	source='./RobotModel/DynamicBody.cpp' object='libwalkGenJRL_la-DynamicBody.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-DynamicBody.lo `test -f './RobotModel/DynamicBody.cpp' || echo '$(srcdir)/'`./RobotModel/DynamicBody.cpp

libwalkGenJRL_la-DynamicMultiBody.lo: ./RobotModel/DynamicMultiBody.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-DynamicMultiBody.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-DynamicMultiBody.Tpo" -c -o libwalkGenJRL_la-DynamicMultiBody.lo `test -f './RobotModel/DynamicMultiBody.cpp' || echo '$(srcdir)/'`./RobotModel/DynamicMultiBody.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-DynamicMultiBody.Tpo" "$(DEPDIR)/libwalkGenJRL_la-DynamicMultiBody.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-DynamicMultiBody.Tpo"; exit 1; fi
#	source='./RobotModel/DynamicMultiBody.cpp' object='libwalkGenJRL_la-DynamicMultiBody.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-DynamicMultiBody.lo `test -f './RobotModel/DynamicMultiBody.cpp' || echo '$(srcdir)/'`./RobotModel/DynamicMultiBody.cpp

libwalkGenJRL_la-HumanoidDynamicMultiBody.lo: ./RobotModel/HumanoidDynamicMultiBody.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-HumanoidDynamicMultiBody.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-HumanoidDynamicMultiBody.Tpo" -c -o libwalkGenJRL_la-HumanoidDynamicMultiBody.lo `test -f './RobotModel/HumanoidDynamicMultiBody.cpp' || echo '$(srcdir)/'`./RobotModel/HumanoidDynamicMultiBody.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-HumanoidDynamicMultiBody.Tpo" "$(DEPDIR)/libwalkGenJRL_la-HumanoidDynamicMultiBody.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-HumanoidDynamicMultiBody.Tpo"; exit 1; fi
#	source='./RobotModel/HumanoidDynamicMultiBody.cpp' object='libwalkGenJRL_la-HumanoidDynamicMultiBody.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-HumanoidDynamicMultiBody.lo `test -f './RobotModel/HumanoidDynamicMultiBody.cpp' || echo '$(srcdir)/'`./RobotModel/HumanoidDynamicMultiBody.cpp

libwalkGenJRL_la-HumanoidSpecificities.lo: ./RobotModel/HumanoidSpecificities.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-HumanoidSpecificities.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-HumanoidSpecificities.Tpo" -c -o libwalkGenJRL_la-HumanoidSpecificities.lo `test -f './RobotModel/HumanoidSpecificities.cpp' || echo '$(srcdir)/'`./RobotModel/HumanoidSpecificities.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-HumanoidSpecificities.Tpo" "$(DEPDIR)/libwalkGenJRL_la-HumanoidSpecificities.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-HumanoidSpecificities.Tpo"; exit 1; fi
#	source='./RobotModel/HumanoidSpecificities.cpp' object='libwalkGenJRL_la-HumanoidSpecificities.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-HumanoidSpecificities.lo `test -f './RobotModel/HumanoidSpecificities.cpp' || echo '$(srcdir)/'`./RobotModel/HumanoidSpecificities.cpp

libwalkGenJRL_la-InverseKinematics.lo: ./MotionGeneration/InverseKinematics.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-InverseKinematics.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-InverseKinematics.Tpo" -c -o libwalkGenJRL_la-InverseKinematics.lo `test -f './MotionGeneration/InverseKinematics.cpp' || echo '$(srcdir)/'`./MotionGeneration/InverseKinematics.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-InverseKinematics.Tpo" "$(DEPDIR)/libwalkGenJRL_la-InverseKinematics.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-InverseKinematics.Tpo"; exit 1; fi
#	source='./MotionGeneration/InverseKinematics.cpp' object='libwalkGenJRL_la-InverseKinematics.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-InverseKinematics.lo `test -f './MotionGeneration/InverseKinematics.cpp' || echo '$(srcdir)/'`./MotionGeneration/InverseKinematics.cpp

libwalkGenJRL_la-StepOverPlanner.lo: ./MotionGeneration/StepOverPlanner.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-StepOverPlanner.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-StepOverPlanner.Tpo" -c -o libwalkGenJRL_la-StepOverPlanner.lo `test -f './MotionGeneration/StepOverPlanner.cpp' || echo '$(srcdir)/'`./MotionGeneration/StepOverPlanner.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-StepOverPlanner.Tpo" "$(DEPDIR)/libwalkGenJRL_la-StepOverPlanner.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-StepOverPlanner.Tpo"; exit 1; fi
#	source='./MotionGeneration/StepOverPlanner.cpp' object='libwalkGenJRL_la-StepOverPlanner.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-StepOverPlanner.lo `test -f './MotionGeneration/StepOverPlanner.cpp' || echo '$(srcdir)/'`./MotionGeneration/StepOverPlanner.cpp

libwalkGenJRL_la-CollisionDetector.lo: ./MotionGeneration/CollisionDetector.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-CollisionDetector.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-CollisionDetector.Tpo" -c -o libwalkGenJRL_la-CollisionDetector.lo `test -f './MotionGeneration/CollisionDetector.cpp' || echo '$(srcdir)/'`./MotionGeneration/CollisionDetector.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-CollisionDetector.Tpo" "$(DEPDIR)/libwalkGenJRL_la-CollisionDetector.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-CollisionDetector.Tpo"; exit 1; fi
#	source='./MotionGeneration/CollisionDetector.cpp' object='libwalkGenJRL_la-CollisionDetector.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-CollisionDetector.lo `test -f './MotionGeneration/CollisionDetector.cpp' || echo '$(srcdir)/'`./MotionGeneration/CollisionDetector.cpp

libwalkGenJRL_la-WaistHeightVariation.lo: ./MotionGeneration/WaistHeightVariation.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-WaistHeightVariation.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-WaistHeightVariation.Tpo" -c -o libwalkGenJRL_la-WaistHeightVariation.lo `test -f './MotionGeneration/WaistHeightVariation.cpp' || echo '$(srcdir)/'`./MotionGeneration/WaistHeightVariation.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-WaistHeightVariation.Tpo" "$(DEPDIR)/libwalkGenJRL_la-WaistHeightVariation.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-WaistHeightVariation.Tpo"; exit 1; fi
#	source='./MotionGeneration/WaistHeightVariation.cpp' object='libwalkGenJRL_la-WaistHeightVariation.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-WaistHeightVariation.lo `test -f './MotionGeneration/WaistHeightVariation.cpp' || echo '$(srcdir)/'`./MotionGeneration/WaistHeightVariation.cpp

libwalkGenJRL_la-UpperBodyMotion.lo: ./MotionGeneration/UpperBodyMotion.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-UpperBodyMotion.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-UpperBodyMotion.Tpo" -c -o libwalkGenJRL_la-UpperBodyMotion.lo `test -f './MotionGeneration/UpperBodyMotion.cpp' || echo '$(srcdir)/'`./MotionGeneration/UpperBodyMotion.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-UpperBodyMotion.Tpo" "$(DEPDIR)/libwalkGenJRL_la-UpperBodyMotion.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-UpperBodyMotion.Tpo"; exit 1; fi
#	source='./MotionGeneration/UpperBodyMotion.cpp' object='libwalkGenJRL_la-UpperBodyMotion.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-UpperBodyMotion.lo `test -f './MotionGeneration/UpperBodyMotion.cpp' || echo '$(srcdir)/'`./MotionGeneration/UpperBodyMotion.cpp

libwalkGenJRL_la-GenerateMotionFromKineoWorks.lo: ./MotionGeneration/GenerateMotionFromKineoWorks.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-GenerateMotionFromKineoWorks.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-GenerateMotionFromKineoWorks.Tpo" -c -o libwalkGenJRL_la-GenerateMotionFromKineoWorks.lo `test -f './MotionGeneration/GenerateMotionFromKineoWorks.cpp' || echo '$(srcdir)/'`./MotionGeneration/GenerateMotionFromKineoWorks.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-GenerateMotionFromKineoWorks.Tpo" "$(DEPDIR)/libwalkGenJRL_la-GenerateMotionFromKineoWorks.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-GenerateMotionFromKineoWorks.Tpo"; exit 1; fi
#	source='./MotionGeneration/GenerateMotionFromKineoWorks.cpp' object='libwalkGenJRL_la-GenerateMotionFromKineoWorks.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-GenerateMotionFromKineoWorks.lo `test -f './MotionGeneration/GenerateMotionFromKineoWorks.cpp' || echo '$(srcdir)/'`./MotionGeneration/GenerateMotionFromKineoWorks.cpp

libwalkGenJRL_la-ComAndFootRealizationByGeometry.lo: ./MotionGeneration/ComAndFootRealizationByGeometry.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-ComAndFootRealizationByGeometry.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-ComAndFootRealizationByGeometry.Tpo" -c -o libwalkGenJRL_la-ComAndFootRealizationByGeometry.lo `test -f './MotionGeneration/ComAndFootRealizationByGeometry.cpp' || echo '$(srcdir)/'`./MotionGeneration/ComAndFootRealizationByGeometry.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-ComAndFootRealizationByGeometry.Tpo" "$(DEPDIR)/libwalkGenJRL_la-ComAndFootRealizationByGeometry.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-ComAndFootRealizationByGeometry.Tpo"; exit 1; fi
#	source='./MotionGeneration/ComAndFootRealizationByGeometry.cpp' object='libwalkGenJRL_la-ComAndFootRealizationByGeometry.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-ComAndFootRealizationByGeometry.lo `test -f './MotionGeneration/ComAndFootRealizationByGeometry.cpp' || echo '$(srcdir)/'`./MotionGeneration/ComAndFootRealizationByGeometry.cpp

libwalkGenJRL_la-StepStackHandler.lo: StepStackHandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-StepStackHandler.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-StepStackHandler.Tpo" -c -o libwalkGenJRL_la-StepStackHandler.lo `test -f 'StepStackHandler.cpp' || echo '$(srcdir)/'`StepStackHandler.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-StepStackHandler.Tpo" "$(DEPDIR)/libwalkGenJRL_la-StepStackHandler.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-StepStackHandler.Tpo"; exit 1; fi
#	source='StepStackHandler.cpp' object='libwalkGenJRL_la-StepStackHandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-StepStackHandler.lo `test -f 'StepStackHandler.cpp' || echo '$(srcdir)/'`StepStackHandler.cpp

libwalkGenJRL_la-PatternGeneratorInterface.lo: PatternGeneratorInterface.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libwalkGenJRL_la-PatternGeneratorInterface.lo -MD -MP -MF "$(DEPDIR)/libwalkGenJRL_la-PatternGeneratorInterface.Tpo" -c -o libwalkGenJRL_la-PatternGeneratorInterface.lo `test -f 'PatternGeneratorInterface.cpp' || echo '$(srcdir)/'`PatternGeneratorInterface.cpp; \
	then mv -f "$(DEPDIR)/libwalkGenJRL_la-PatternGeneratorInterface.Tpo" "$(DEPDIR)/libwalkGenJRL_la-PatternGeneratorInterface.Plo"; else rm -f "$(DEPDIR)/libwalkGenJRL_la-PatternGeneratorInterface.Tpo"; exit 1; fi
#	source='PatternGeneratorInterface.cpp' object='libwalkGenJRL_la-PatternGeneratorInterface.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwalkGenJRL_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libwalkGenJRL_la-PatternGeneratorInterface.lo `test -f 'PatternGeneratorInterface.cpp' || echo '$(srcdir)/'`PatternGeneratorInterface.cpp

TestFootPrintPGInterface-TestFootPrintPGInterface.o: TestFootPrintPGInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(TestFootPrintPGInterface_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TestFootPrintPGInterface-TestFootPrintPGInterface.o -MD -MP -MF "$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Tpo" -c -o TestFootPrintPGInterface-TestFootPrintPGInterface.o `test -f 'TestFootPrintPGInterface.cpp' || echo '$(srcdir)/'`TestFootPrintPGInterface.cpp; \
	then mv -f "$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Tpo" "$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Po"; else rm -f "$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Tpo"; exit 1; fi
#	source='TestFootPrintPGInterface.cpp' object='TestFootPrintPGInterface-TestFootPrintPGInterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(TestFootPrintPGInterface_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TestFootPrintPGInterface-TestFootPrintPGInterface.o `test -f 'TestFootPrintPGInterface.cpp' || echo '$(srcdir)/'`TestFootPrintPGInterface.cpp

TestFootPrintPGInterface-TestFootPrintPGInterface.obj: TestFootPrintPGInterface.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(TestFootPrintPGInterface_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TestFootPrintPGInterface-TestFootPrintPGInterface.obj -MD -MP -MF "$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Tpo" -c -o TestFootPrintPGInterface-TestFootPrintPGInterface.obj `if test -f 'TestFootPrintPGInterface.cpp'; then $(CYGPATH_W) 'TestFootPrintPGInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/TestFootPrintPGInterface.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Tpo" "$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Po"; else rm -f "$(DEPDIR)/TestFootPrintPGInterface-TestFootPrintPGInterface.Tpo"; exit 1; fi
#	source='TestFootPrintPGInterface.cpp' object='TestFootPrintPGInterface-TestFootPrintPGInterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(TestFootPrintPGInterface_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TestFootPrintPGInterface-TestFootPrintPGInterface.obj `if test -f 'TestFootPrintPGInterface.cpp'; then $(CYGPATH_W) 'TestFootPrintPGInterface.cpp'; else $(CYGPATH_W) '$(srcdir)/TestFootPrintPGInterface.cpp'; fi`

TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.o: TestHumanoidDynamicRobot.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(TestHumanoidDynamicRobot_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.o -MD -MP -MF "$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Tpo" -c -o TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.o `test -f 'TestHumanoidDynamicRobot.cpp' || echo '$(srcdir)/'`TestHumanoidDynamicRobot.cpp; \
	then mv -f "$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Tpo" "$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Po"; else rm -f "$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Tpo"; exit 1; fi
#	source='TestHumanoidDynamicRobot.cpp' object='TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(TestHumanoidDynamicRobot_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.o `test -f 'TestHumanoidDynamicRobot.cpp' || echo '$(srcdir)/'`TestHumanoidDynamicRobot.cpp

TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.obj: TestHumanoidDynamicRobot.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(TestHumanoidDynamicRobot_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.obj -MD -MP -MF "$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Tpo" -c -o TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.obj `if test -f 'TestHumanoidDynamicRobot.cpp'; then $(CYGPATH_W) 'TestHumanoidDynamicRobot.cpp'; else $(CYGPATH_W) '$(srcdir)/TestHumanoidDynamicRobot.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Tpo" "$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Po"; else rm -f "$(DEPDIR)/TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.Tpo"; exit 1; fi
#	source='TestHumanoidDynamicRobot.cpp' object='TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(TestHumanoidDynamicRobot_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TestHumanoidDynamicRobot-TestHumanoidDynamicRobot.obj `if test -f 'TestHumanoidDynamicRobot.cpp'; then $(CYGPATH_W) 'TestHumanoidDynamicRobot.cpp'; else $(CYGPATH_W) '$(srcdir)/TestHumanoidDynamicRobot.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-walkGenJRLHEADERS: $(walkGenJRL_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(walkGenJRLdir)" || $(mkdir_p) "$(DESTDIR)$(walkGenJRLdir)"
	@list='$(walkGenJRL_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(walkGenJRLHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(walkGenJRLdir)/$$f'"; \
	  $(walkGenJRLHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(walkGenJRLdir)/$$f"; \
	done

uninstall-walkGenJRLHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(walkGenJRL_HEADERS)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(walkGenJRLdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(walkGenJRLdir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/Mathematics $(distdir)/MotionGeneration $(distdir)/PreviewControl $(distdir)/RobotModel $(distdir)/ZMPRefTrajectoryGeneration
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(HEADERS)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(walkGenJRLdir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-walkGenJRLHEADERS

install-exec-am: install-binPROGRAMS install-libLTLIBRARIES

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am \
	uninstall-libLTLIBRARIES uninstall-walkGenJRLHEADERS

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libLTLIBRARIES clean-libtool ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-libLTLIBRARIES \
	install-man install-strip install-walkGenJRLHEADERS \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-info-am uninstall-libLTLIBRARIES \
	uninstall-walkGenJRLHEADERS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
