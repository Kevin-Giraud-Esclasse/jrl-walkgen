// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#ifndef ___walkpluginJRL_h__
#define ___walkpluginJRL_h__

#include <common.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

class walkpluginJRL;
typedef walkpluginJRL* walkpluginJRL_ptr;
typedef walkpluginJRL* walkpluginJRLRef;
extern CORBA::TypeCode_ptr _tc_walkpluginJRL;

 void OBDuplicate(walkpluginJRL_ptr);
 void OBRelease(walkpluginJRL_ptr);

 void OBMarshal(walkpluginJRL_ptr, OBEC_OutputStreamImpl*, CORBA_Environment*);
 void OBUnmarshal(walkpluginJRL_ptr&, OBEC_InputStreamImpl*, CORBA_Environment*);

#ifdef OBEA_DLL
#   ifndef HAVE_NO_EXPLICIT_TEMPLATES
template class  OB::ObjVar< walkpluginJRL >;
#   endif
#endif
typedef OB::ObjVar< walkpluginJRL > walkpluginJRL_var;
#ifdef OBEA_DLL
#   ifndef HAVE_NO_EXPLICIT_TEMPLATES
template class  OB::ObjOut< walkpluginJRL >;
#   endif
#endif
typedef OB::ObjOut< walkpluginJRL > walkpluginJRL_out;

//
// IDL:walkpluginJRL:1.0
//
class walkpluginJRL : public ::Plugin
{
    walkpluginJRL(const walkpluginJRL&);
    void operator=(const walkpluginJRL&);

protected:

    static const char* ids_[];

public:

    walkpluginJRL() { }
    virtual ~walkpluginJRL() { }

    typedef walkpluginJRL_ptr _ptr_type;
    typedef walkpluginJRL_var _var_type;

    static inline walkpluginJRL_ptr
    _duplicate(walkpluginJRL_ptr p)
    {
        if (p)
            p -> _OB_incRef();
        return p;
    }

    static inline walkpluginJRL_ptr
    _nil()
    {
        return 0;
    }

    static walkpluginJRL_ptr _narrow(CORBA::Object_ptr);

    static const char** _OB_staticIds();
    virtual const char** _OB_ids() const;

    //
    // IDL:walkpluginJRL/setTargetPos:1.0
    //
    void setTargetPos(CORBA::Float x,
                      CORBA::Float y,
                      CORBA::Float th);

    //
    // IDL:walkpluginJRL/setTargetPosNoWait:1.0
    //
    void setTargetPosNoWait(CORBA::Float x,
                            CORBA::Float y,
                            CORBA::Float th);

    //
    // IDL:walkpluginJRL/setArc:1.0
    //
    void setArc(CORBA::Float x,
                CORBA::Float y,
                CORBA::Float th);

    //
    // IDL:walkpluginJRL/setArcNoWait:1.0
    //
    void setArcNoWait(CORBA::Float x,
                      CORBA::Float y,
                      CORBA::Float th);

    //
    // IDL:walkpluginJRL/setRfootPos:1.0
    //
    void setRfootPos(CORBA::Float x,
                     CORBA::Float y,
                     CORBA::Float th);

    //
    // IDL:walkpluginJRL/setRfootPosNoWait:1.0
    //
    void setRfootPosNoWait(CORBA::Float x,
                           CORBA::Float y,
                           CORBA::Float th);

    //
    // IDL:walkpluginJRL/setLfootPos:1.0
    //
    void setLfootPos(CORBA::Float x,
                     CORBA::Float y,
                     CORBA::Float th);

    //
    // IDL:walkpluginJRL/setLfootPosNoWait:1.0
    //
    void setLfootPosNoWait(CORBA::Float x,
                           CORBA::Float y,
                           CORBA::Float th);

    //
    // IDL:walkpluginJRL/stopWalking:1.0
    //
    void stopWalking();

    //
    // IDL:walkpluginJRL/waitArrival:1.0
    //
    void waitArrival();

    //
    // IDL:walkpluginJRL/startStepping:1.0
    //
    void startStepping();

    //
    // IDL:walkpluginJRL/stopStepping:1.0
    //
    void stopStepping();

    //
    // IDL:walkpluginJRL/setWalkingVelocity:1.0
    //
    void setWalkingVelocity(CORBA::Float dx,
                            CORBA::Float dy,
                            CORBA::Float dth);

    //
    // IDL:walkpluginJRL/getWaistVelocity:1.0
    //
    void getWaistVelocity(CORBA::Float_out vx,
                          CORBA::Float_out vy,
                          CORBA::Float_out omega);

    //
    // IDL:walkpluginJRL/getWaistPositionAndOrientation:1.0
    //
    void getWaistPositionAndOrientation(::TransformQuaternion_out aTQ,
                                        CORBA::Float_out Orientation);

    //
    // IDL:walkpluginJRL/setWaistPositionAndOrientation:1.0
    //
    void setWaistPositionAndOrientation(const ::TransformQuaternion& aTQ);

    //
    // IDL:walkpluginJRL/getWaistAcceleration:1.0
    //
    void getWaistAcceleration(::TransformQuaternion_out aTQ);

    //
    // IDL:walkpluginJRL/isWalking:1.0
    //
    CORBA::Boolean isWalking();

protected:

    //
    // IDL:walkpluginJRL/setTargetPos:1.0
    //
    void
    _OB_op_setTargetPos(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setTargetPosNoWait:1.0
    //
    void
    _OB_op_setTargetPosNoWait(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setArc:1.0
    //
    void
    _OB_op_setArc(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setArcNoWait:1.0
    //
    void
    _OB_op_setArcNoWait(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setRfootPos:1.0
    //
    void
    _OB_op_setRfootPos(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setRfootPosNoWait:1.0
    //
    void
    _OB_op_setRfootPosNoWait(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setLfootPos:1.0
    //
    void
    _OB_op_setLfootPos(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setLfootPosNoWait:1.0
    //
    void
    _OB_op_setLfootPosNoWait(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/stopWalking:1.0
    //
    void
    _OB_op_stopWalking(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/waitArrival:1.0
    //
    void
    _OB_op_waitArrival(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/startStepping:1.0
    //
    void
    _OB_op_startStepping(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/stopStepping:1.0
    //
    void
    _OB_op_stopStepping(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setWalkingVelocity:1.0
    //
    void
    _OB_op_setWalkingVelocity(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float dx,
        CORBA::Float dy,
        CORBA::Float dth,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/getWaistVelocity:1.0
    //
    void
    _OB_op_getWaistVelocity(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA::Float_out vx,
        CORBA::Float_out vy,
        CORBA::Float_out omega,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/getWaistPositionAndOrientation:1.0
    //
    void
    _OB_op_getWaistPositionAndOrientation(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        TransformQuaternion_out aTQ,
        CORBA::Float_out Orientation,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setWaistPositionAndOrientation:1.0
    //
    void
    _OB_op_setWaistPositionAndOrientation(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        const TransformQuaternion& aTQ,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/getWaistAcceleration:1.0
    //
    void
    _OB_op_getWaistAcceleration(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        TransformQuaternion_out aTQ,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/isWalking:1.0
    //
    CORBA::Boolean
    _OB_op_isWalking(
        OBEC_MarshalStubImpl_ptr _ob_stub_impl,
        CORBA_Environment* _ob_cev
    );
};

//
// IDL:walkpluginJRL:1.0
//
namespace CORBA
{

inline void
release(::walkpluginJRL_ptr p)
{
    if (p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(::walkpluginJRL_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, walkpluginJRL_ptr*);
void operator<<=(CORBA::Any&, walkpluginJRL_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, walkpluginJRL_ptr&);

inline void
operator<<=(CORBA::Any_var& any, walkpluginJRL_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, walkpluginJRL_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, walkpluginJRL_ptr& val)
{
    return any.in() >>= val;
}

#endif
