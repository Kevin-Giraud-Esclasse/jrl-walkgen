// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#ifndef ___walkpluginJRL_skel_h__
#define ___walkpluginJRL_skel_h__

#include <walkpluginJRL.h>

#include <common_skel.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

//
// IDL:walkpluginJRL:1.0
//
class POA_walkpluginJRL : virtual public POA_Plugin
{
    POA_walkpluginJRL(const POA_walkpluginJRL&);
    void operator=(const POA_walkpluginJRL&);

protected:

    //
    // IDL:walkpluginJRL/setTargetPos:1.0
    //
    void
    _OB_op_setTargetPos(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setTargetPosNoWait:1.0
    //
    void
    _OB_op_setTargetPosNoWait(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setArc:1.0
    //
    void
    _OB_op_setArc(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setArcNoWait:1.0
    //
    void
    _OB_op_setArcNoWait(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setRfootPos:1.0
    //
    void
    _OB_op_setRfootPos(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setRfootPosNoWait:1.0
    //
    void
    _OB_op_setRfootPosNoWait(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setLfootPos:1.0
    //
    void
    _OB_op_setLfootPos(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setLfootPosNoWait:1.0
    //
    void
    _OB_op_setLfootPosNoWait(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/stopWalking:1.0
    //
    void
    _OB_op_stopWalking(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/waitArrival:1.0
    //
    void
    _OB_op_waitArrival(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/startStepping:1.0
    //
    void
    _OB_op_startStepping(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/stopStepping:1.0
    //
    void
    _OB_op_stopStepping(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setWalkingVelocity:1.0
    //
    void
    _OB_op_setWalkingVelocity(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/getWaistVelocity:1.0
    //
    void
    _OB_op_getWaistVelocity(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/getWaistPositionAndOrientation:1.0
    //
    void
    _OB_op_getWaistPositionAndOrientation(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setWaistPositionAndOrientation:1.0
    //
    void
    _OB_op_setWaistPositionAndOrientation(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/getWaistAcceleration:1.0
    //
    void
    _OB_op_getWaistAcceleration(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/isWalking:1.0
    //
    void
    _OB_op_isWalking(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

public:

    POA_walkpluginJRL() { }

    virtual CORBA::Boolean
    _is_a(
        const char* _ob_repid
    ) throw(CORBA::SystemException);

    virtual CORBA::RepositoryId
    _primary_interface(
        const PortableServer::ObjectId& _ob_oid,
        PortableServer::POA_ptr _ob_poa
    );

    ::walkpluginJRL_ptr
    _this(
    );

    virtual void
    _OB_dispatch(
        OBEC_UpcallImpl* _ob_up,
        CORBA_Environment* _ob_cev
    );

    //
    // IDL:walkpluginJRL/setTargetPos:1.0
    //
    virtual void setTargetPos(
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setTargetPosNoWait:1.0
    //
    virtual void setTargetPosNoWait(
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setArc:1.0
    //
    virtual void setArc(
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setArcNoWait:1.0
    //
    virtual void setArcNoWait(
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setRfootPos:1.0
    //
    virtual void setRfootPos(
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setRfootPosNoWait:1.0
    //
    virtual void setRfootPosNoWait(
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setLfootPos:1.0
    //
    virtual void setLfootPos(
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setLfootPosNoWait:1.0
    //
    virtual void setLfootPosNoWait(
        CORBA::Float x,
        CORBA::Float y,
        CORBA::Float th
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/stopWalking:1.0
    //
    virtual void stopWalking(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/waitArrival:1.0
    //
    virtual void waitArrival(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/startStepping:1.0
    //
    virtual void startStepping(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/stopStepping:1.0
    //
    virtual void stopStepping(
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setWalkingVelocity:1.0
    //
    virtual void setWalkingVelocity(
        CORBA::Float dx,
        CORBA::Float dy,
        CORBA::Float dth
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/getWaistVelocity:1.0
    //
    virtual void getWaistVelocity(
        CORBA::Float_out vx,
        CORBA::Float_out vy,
        CORBA::Float_out omega
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/getWaistPositionAndOrientation:1.0
    //
    virtual void getWaistPositionAndOrientation(
        TransformQuaternion_out aTQ,
        CORBA::Float_out Orientation
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/setWaistPositionAndOrientation:1.0
    //
    virtual void setWaistPositionAndOrientation(
        const TransformQuaternion& aTQ
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/getWaistAcceleration:1.0
    //
    virtual void getWaistAcceleration(
        TransformQuaternion_out aTQ
    ) throw(CORBA::SystemException) = 0;

    //
    // IDL:walkpluginJRL/isWalking:1.0
    //
    virtual CORBA::Boolean isWalking(
    ) throw(CORBA::SystemException) = 0;
};

#endif
