// **********************************************************************
//
// Generated by the Orbix/E IDL-to-C++ Translator
//
// Copyright (c) 2003
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 2.2.0

#include <OBE/CORBAClient.h>
#include <walkpluginJRL.h>

#ifndef OBEC_INTEGER_VERSION
#   error No Orbix/E version defined! Is <OBE/CORBA.h> included?
#endif

#ifndef OBEC_NO_VERSION_CHECK
#   if (OBEC_INTEGER_VERSION != 2020000L)
#       error Orbix/E version mismatch!
#   endif
#endif

extern "C"
{

typedef CORBA_Object _OBE_C_walkpluginJRL;
}

//
// IDL:walkpluginJRL:1.0
//
static _CORBA_TypeCode _OB_TC__OBE_C_walkpluginJRL =
{
    CORBA_tk_objref,
    (char*)"IDL:walkpluginJRL:1.0",
    (char*)"walkpluginJRL",
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    0,
    NULL,
    OBEC_TRUE
};

static OB::TypeCodeConst _OBE_TC_walkpluginJRL(&_OB_TC__OBE_C_walkpluginJRL);

CORBA::TypeCode_ptr _tc_walkpluginJRL = &_OBE_TC_walkpluginJRL;

//
// IDL:walkpluginJRL:1.0
//
const char* walkpluginJRL::ids_[] =
{
    "IDL:walkpluginJRL:1.0",
    "IDL:CommandReceiver:1.0",
    "IDL:Plugin:1.0",
    0
};

void
OBDuplicate(walkpluginJRL_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(walkpluginJRL_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

walkpluginJRL_ptr
walkpluginJRL::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        walkpluginJRL_ptr v = dynamic_cast<walkpluginJRL_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            ::walkpluginJRL* val = new ::walkpluginJRL;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

const char**
walkpluginJRL::_OB_staticIds()
{
    return ids_;
}

const char**
walkpluginJRL::_OB_ids() const
{
    return ::walkpluginJRL::ids_;
}

void
OBMarshal(
    walkpluginJRL_ptr _ob_v,
    OBEC_OutputStreamImpl* _ob_out,
    CORBA_Environment* _ob_cev
)
{
    CORBA_Object _ob_cobj = NULL;
    if (_ob_v)
    {
        _ob_cobj = _ob_v->_OB_impl_nodup();
        assert(_ob_cobj != NULL);
    }
    OBEC_OutputStreamImpl_write_Object(_ob_out, _ob_cobj, _ob_cev);
}

void
OBUnmarshal(
    walkpluginJRL_ptr& _ob_v,
    OBEC_InputStreamImpl* _ob_in,
    CORBA_Environment* _ob_cev
)
{
    walkpluginJRL_var old = _ob_v;
    CORBA_Object _ob_cobj = OBEC_InputStreamImpl_read_Object(_ob_in, _ob_cev);

    if (_ob_cobj != NULL && _ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_v = new walkpluginJRL;
        _ob_v->_OB_setup(_ob_cobj);
        CORBA_Object_release(_ob_cobj);
    }
    else
        _ob_v = walkpluginJRL::_nil();
}

//
// IDL:walkpluginJRL/setTargetPos:1.0
//
void
walkpluginJRL::_OB_op_setTargetPos(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setTargetPos", 12, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, x, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, y, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, th, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setTargetPosNoWait:1.0
//
void
walkpluginJRL::_OB_op_setTargetPosNoWait(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setTargetPosNoWait", 18, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, x, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, y, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, th, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setArc:1.0
//
void
walkpluginJRL::_OB_op_setArc(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setArc", 6, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, x, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, y, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, th, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setArcNoWait:1.0
//
void
walkpluginJRL::_OB_op_setArcNoWait(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setArcNoWait", 12, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, x, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, y, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, th, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setRfootPos:1.0
//
void
walkpluginJRL::_OB_op_setRfootPos(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setRfootPos", 11, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, x, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, y, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, th, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setRfootPosNoWait:1.0
//
void
walkpluginJRL::_OB_op_setRfootPosNoWait(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setRfootPosNoWait", 17, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, x, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, y, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, th, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setLfootPos:1.0
//
void
walkpluginJRL::_OB_op_setLfootPos(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setLfootPos", 11, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, x, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, y, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, th, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setLfootPosNoWait:1.0
//
void
walkpluginJRL::_OB_op_setLfootPosNoWait(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setLfootPosNoWait", 17, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, x, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, y, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, th, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/getLegJointSpeed:1.0
//
CORBA::Long
walkpluginJRL::_OB_op_getLegJointSpeed(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::dsequence_out dq,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Long _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getLegJointSpeed", 16, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_long(_ob_in, _ob_cev);
                dq = new ::dsequence;
                CORBA::ULong _ob_len0 = OBEC_InputStreamImpl_read_ulong(_ob_in, _ob_cev);
                dq -> length(_ob_len0);
                OBEC_InputStreamImpl_read_double_array(_ob_in, dq -> get_buffer(), _ob_len0, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

//
// IDL:walkpluginJRL/stopWalking:1.0
//
void
walkpluginJRL::_OB_op_stopWalking(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "stopWalking", 11, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/waitArrival:1.0
//
void
walkpluginJRL::_OB_op_waitArrival(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "waitArrival", 11, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/startStepping:1.0
//
void
walkpluginJRL::_OB_op_startStepping(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "startStepping", 13, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/stopStepping:1.0
//
void
walkpluginJRL::_OB_op_stopStepping(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "stopStepping", 12, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setWalkingVelocity:1.0
//
void
walkpluginJRL::_OB_op_setWalkingVelocity(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float dx,
    CORBA::Float dy,
    CORBA::Float dth,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setWalkingVelocity", 18, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, dx, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, dy, _ob_cev);
            OBEC_OutputStreamImpl_write_float(_ob_out, dth, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/getWaistVelocity:1.0
//
void
walkpluginJRL::_OB_op_getWaistVelocity(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA::Float_out vx,
    CORBA::Float_out vy,
    CORBA::Float_out omega,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getWaistVelocity", 16, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                vx = OBEC_InputStreamImpl_read_float(_ob_in, _ob_cev);
                vy = OBEC_InputStreamImpl_read_float(_ob_in, _ob_cev);
                omega = OBEC_InputStreamImpl_read_float(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/getWaistPositionAndOrientation:1.0
//
void
walkpluginJRL::_OB_op_getWaistPositionAndOrientation(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::TransformQuaternion_out aTQ,
    CORBA::Float_out Orientation,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getWaistPositionAndOrientation", 30, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                ::TransformQuaternion::_OB_unmarshal(aTQ, _ob_in, _ob_cev);
                Orientation = OBEC_InputStreamImpl_read_float(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/setWaistPositionAndOrientation:1.0
//
void
walkpluginJRL::_OB_op_setWaistPositionAndOrientation(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    const ::TransformQuaternion& aTQ,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_OutputStreamImpl* _ob_out;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "setWaistPositionAndOrientation", 30, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            _ob_out = OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            aTQ._OB_marshal(_ob_out, _ob_cev);
            if (_ob_cev->_major == CORBA_SYSTEM_EXCEPTION)
            {
                OBEC_DowncallImpl_marshalEx(&_ob_down, _ob_cev);
                break;
            }

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);



            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/getWaistAcceleration:1.0
//
void
walkpluginJRL::_OB_op_getWaistAcceleration(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    ::TransformQuaternion_out aTQ,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "getWaistAcceleration", 20, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                ::TransformQuaternion::_OB_unmarshal(aTQ, _ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);
}

//
// IDL:walkpluginJRL/isWalking:1.0
//
CORBA::Boolean
walkpluginJRL::_OB_op_isWalking(
    OBEC_MarshalStubImpl_ptr _ob_stub_impl,
    CORBA_Environment* _ob_cev
)
{
    CORBA::Boolean _ob_init;
    OBEC_Client_ptr _ob_client = NULL;
    OBEC_RefCountProfileInfo* _ob_profile = NULL;
    CORBA::Boolean _ob_r;

    OBEC_PROLOG(_ob_cev);

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__OB_bind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
    OBEC_MarshalStubImpl__OB_bind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif

    _ob_r = 0;
    CORBA::Boolean _ob_success = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION && !_ob_success)
    {
        OBEC_DowncallImpl _ob_down;
        OBEC_InputStreamImpl* _ob_in;

        while (1)
        {
            _ob_init = 0;

            OBEC_DowncallImpl__init(&_ob_down, _ob_stub_impl->m_orb_instance, _ob_client, _ob_profile, _ob_stub_impl->m_policies, "isWalking", 9, OBEC_TRUE, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_init = 1;

            OBEC_DowncallImpl_preMarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            OBEC_DowncallImpl_request(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            _ob_in = OBEC_DowncallImpl_preUnmarshal(&_ob_down, _ob_cev);
            OBE_BREAK_EXCEPTION(_ob_cev);

            if (OBEC_DowncallImpl_userException(&_ob_down, _ob_cev))
            {
                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }
            else
            {
                _ob_r = OBEC_InputStreamImpl_read_boolean(_ob_in, _ob_cev);
                if (_ob_cev->_major != CORBA_NO_EXCEPTION)
                {
                    OBEC_DowncallImpl_unmarshalEx(&_ob_down, _ob_cev);
                    break;
                }

                OBEC_DowncallImpl_postUnmarshal(&_ob_down, _ob_cev);
                OBE_BREAK_EXCEPTION(_ob_cev);
            }

            OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            _ob_init = 0;
            OBE_BREAK_EXCEPTION(_ob_cev);
            _ob_success = 1;
            break;
        }

        if (!_ob_success)
        {
            if (_ob_cev->_major == OBEC_FAILURE_EXCEPTION)
            {
#ifdef HAVE_OBE_THREAD_POOL
                OBEC_MarshalStubImpl__OB_rebind(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#else
                OBEC_MarshalStubImpl__OB_rebind_nodup(_ob_stub_impl, &_ob_client, &_ob_profile, _ob_cev);
#endif
            }
            if (_ob_init)
            {
                OBEC_DowncallImpl__fini(&_ob_down, _ob_cev);
            }
        }
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_Client__release(_ob_client);
    OBEC_RefCountProfileInfo__release(_ob_profile);
#endif

    OBEC_EPILOG_EX(_ob_cev);

    return _ob_r;
}

void
operator<<=(CORBA::Any& any, walkpluginJRL_ptr* v)
{
    CORBA_Object cobj = CORBA_OBJECT_NIL;
    if (!CORBA::is_nil(*v))
    {
        cobj = (*v)->_OB_impl_nodup();
    }
    any.replace(_tc_walkpluginJRL, &cobj, true, (CORBA::Object_ptr)*v, &CORBA::Any::sm_any_content_destroyer_object);
}

void
operator<<=(CORBA::Any& any, walkpluginJRL_ptr v)
{
    walkpluginJRL_ptr val = walkpluginJRL::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, walkpluginJRL_ptr& v)
{
    if (any.check_type(_tc_walkpluginJRL))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.cpp_value();
        if (!CORBA::is_nil(val))
            v = dynamic_cast<walkpluginJRL_ptr>(val);
        else
        {
            CORBA_Object cobj = *(CORBA_Object*)any.value();
            if (cobj != CORBA_OBJECT_NIL)
            {
                walkpluginJRL* obj = new walkpluginJRL;
                obj->_OB_setup(cobj);
                v = obj;
                ((CORBA::Any&)any).cpp_value((CORBA::Object_ptr)obj, &CORBA::Any::sm_any_content_destroyer_object);
            }
            else
                v = walkpluginJRL::_nil();
        }

        return true;
    }
    else
        return false;
}

//
// IDL:walkpluginJRL/setTargetPos:1.0
//
void
walkpluginJRL::setTargetPos(
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setTargetPos(_ob_stub_impl, x, y, th, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setTargetPosNoWait:1.0
//
void
walkpluginJRL::setTargetPosNoWait(
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setTargetPosNoWait(_ob_stub_impl, x, y, th, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setArc:1.0
//
void
walkpluginJRL::setArc(
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setArc(_ob_stub_impl, x, y, th, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setArcNoWait:1.0
//
void
walkpluginJRL::setArcNoWait(
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setArcNoWait(_ob_stub_impl, x, y, th, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setRfootPos:1.0
//
void
walkpluginJRL::setRfootPos(
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setRfootPos(_ob_stub_impl, x, y, th, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setRfootPosNoWait:1.0
//
void
walkpluginJRL::setRfootPosNoWait(
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setRfootPosNoWait(_ob_stub_impl, x, y, th, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setLfootPos:1.0
//
void
walkpluginJRL::setLfootPos(
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setLfootPos(_ob_stub_impl, x, y, th, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setLfootPosNoWait:1.0
//
void
walkpluginJRL::setLfootPosNoWait(
    CORBA::Float x,
    CORBA::Float y,
    CORBA::Float th
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setLfootPosNoWait(_ob_stub_impl, x, y, th, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/getLegJointSpeed:1.0
//
CORBA::Long
walkpluginJRL::getLegJointSpeed(
    ::dsequence_out dq
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Long _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_getLegJointSpeed(_ob_stub_impl, dq, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}

//
// IDL:walkpluginJRL/stopWalking:1.0
//
void
walkpluginJRL::stopWalking(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_stopWalking(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/waitArrival:1.0
//
void
walkpluginJRL::waitArrival(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_waitArrival(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/startStepping:1.0
//
void
walkpluginJRL::startStepping(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_startStepping(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/stopStepping:1.0
//
void
walkpluginJRL::stopStepping(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_stopStepping(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setWalkingVelocity:1.0
//
void
walkpluginJRL::setWalkingVelocity(
    CORBA::Float dx,
    CORBA::Float dy,
    CORBA::Float dth
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setWalkingVelocity(_ob_stub_impl, dx, dy, dth, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/getWaistVelocity:1.0
//
void
walkpluginJRL::getWaistVelocity(
    CORBA::Float_out vx,
    CORBA::Float_out vy,
    CORBA::Float_out omega
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_getWaistVelocity(_ob_stub_impl, vx, vy, omega, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/getWaistPositionAndOrientation:1.0
//
void
walkpluginJRL::getWaistPositionAndOrientation(
    ::TransformQuaternion_out aTQ,
    CORBA::Float_out Orientation
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_getWaistPositionAndOrientation(_ob_stub_impl, aTQ, Orientation, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/setWaistPositionAndOrientation:1.0
//
void
walkpluginJRL::setWaistPositionAndOrientation(
    const ::TransformQuaternion& aTQ
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_setWaistPositionAndOrientation(_ob_stub_impl, aTQ, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/getWaistAcceleration:1.0
//
void
walkpluginJRL::getWaistAcceleration(
    ::TransformQuaternion_out aTQ
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _OB_op_getWaistAcceleration(_ob_stub_impl, aTQ, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();
}

//
// IDL:walkpluginJRL/isWalking:1.0
//
CORBA::Boolean
walkpluginJRL::isWalking(
)
{
    OB::Environment _ob_env;
    CORBA_Environment* _ob_cev = _ob_env.get_cenv();
    CORBA::Boolean _ob_r;
    CORBA_boolean _ob_retry = OBEC_TRUE;
    OBCORBA_Object_ptr _ob_obj = (OBCORBA_Object_ptr)_OB_impl_nodup();
    assert_nca(_ob_obj != CORBA_OBJECT_NIL, OBEC_NCANullValue);
    OBEC_MarshalStubImpl_ptr _ob_stub_impl;
#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex* _ob_mut = OBCORBA_Object__OB_mutex(_ob_obj, _ob_cev);
    JTCC_Mutex_lock_noenv(_ob_mut);
#endif

#ifdef HAVE_OBE_THREAD_POOL
    _ob_stub_impl = OBCORBA_Object__OB_bind(_ob_obj, _ob_cev);
#else
    _ob_stub_impl = OBCORBA_Object__OB_bind_nodup(_ob_obj, _ob_cev);
#endif

    _ob_r = 0;
    while (_ob_cev->_major == CORBA_NO_EXCEPTION)
    {
        _ob_r = _OB_op_isWalking(_ob_stub_impl, _ob_cev);
        if (_ob_cev->_major == CORBA_NO_EXCEPTION)
        {
            break;
        }

#ifdef HAVE_OBE_THREAD_POOL
        _ob_stub_impl = OBCORBA_Object__OB_rebind(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#else
        _ob_stub_impl = OBCORBA_Object__OB_rebind_nodup(_ob_obj, _ob_stub_impl, _ob_cev, &_ob_retry);
#endif
    }

#ifdef HAVE_OBE_THREAD_POOL
    OBEC_MarshalStubImpl__release(_ob_stub_impl);
#endif

#ifndef HAVE_OBE_THREAD_POOL
    JTCC_Mutex_unlock_noenv(_ob_mut);
#endif

    _ob_env.raise();

    return _ob_r;
}
